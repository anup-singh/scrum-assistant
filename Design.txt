Here's a class diagram representing the use case you described:

```plaintext
+----------------------+
|   ApplicationDetails |
+----------------------+
| - sdk: ApplicationDetailsSdk |
| + getDetails(): ApplicationData |
+----------------------+

      |
      |
      V

+----------------------+
|  ApplicationDetailsSdk |
+----------------------+
| + getDetails(): ApplicationData |
| + fetchData(): ApplicationData  |
+----------------------+

      |
      |
      V

+----------------------+
|     ReduxStore       |
+----------------------+
| + hasData(): bool    |
| + getData(): ApplicationData |
| + saveData(data: ApplicationData): void |
+----------------------+

      |
      |
      V

+----------------------+
|        ApiClient       |
+----------------------+
| + fetchData(): ApplicationData |
+----------------------+

```

### Explanation

1. **ApplicationDetails**:
   - This component calls the `ApplicationDetailsSdk`.
   - It has a method `getDetails()` that initiates the process to fetch application details.

2. **ApplicationDetailsSdk**:
   - This SDK handles the logic to either retrieve the data from the `ReduxStore` or make an API call if the data is not present.
   - It has a method `getDetails()` which first checks the `ReduxStore` for data.
   - If data is not available in `ReduxStore`, it calls `fetchData()` to make an API call.
   - It saves the data to the `ReduxStore` after fetching it from the API.

3. **ReduxStore**:
   - This class represents the Redux store where data can be checked, retrieved, and saved.
   - It has methods `hasData()`, `getData()`, and `saveData()` for checking the presence of data, retrieving it, and saving it, respectively.

4. **ApiClient**:
   - This class makes the actual API call to fetch the application data.
   - It has a method `fetchData()` that performs the API call and returns the fetched data.

The flow is as follows:
- `ApplicationDetails` calls `getDetails()` on `ApplicationDetailsSdk`.
- `ApplicationDetailsSdk` checks if data is available in `ReduxStore` via `hasData()`.
- If data is available, it retrieves it using `getData()` and returns it.
- If data is not available, it fetches the data using `ApiClient.fetchData()`, saves it to `ReduxStore` using `saveData()`, and then returns the data.

This class diagram encapsulates the sequence and responsibilities of each component in your use case.
